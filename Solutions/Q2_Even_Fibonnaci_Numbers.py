"""
https://projecteuler.net/problem=2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
"""

from time import perf_counter_ns
from functools import lru_cache

from Common.Logger import get_logger, init_logger

FIBONACCI_MAX = 4_000_000
FIBONACCI_SEED = (1, 2)
PERFORMANCE_RUNS = 1_000_000


def fastest(max_value: int = FIBONACCI_MAX) -> int:
    """
    Get the sum of all even Fibonacci numbers up to max_value
    --> benchmark: 2168 ns/run
    :param max_value: The ceiling value of Fibonacci numbers to be added
    :return:
    """
    return caching(max_value)


def generative(max_value: int = FIBONACCI_MAX) -> int:
    """
    This is the fully generative method for the Fibonacci sequence. The full sequence list is generated, the even ones
    are sought out, and summed
    --> benchmark: 8588 ns/run
    :param max_value: The ceiling value of Fibonacci numbers to be added
    :return: The summation in question
    """
    i = 2
    fibonacci_list = [*FIBONACCI_SEED]
    # generate the logger
    while (fibonacci_list[i-1] + fibonacci_list[i-2]) < max_value:
        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2])
        i += 1

    summation = 0
    for number in fibonacci_list:
        if not number % 2:  # if not odd
            summation += number
    return summation


@lru_cache(maxsize=100)  # This max size is arbitrary, but I suppose we could use some fib_upper_bound(FIBONACCI_MAX)...
def fib(n: int) -> int:
    """
    This is a Fibonacci number getter, optimized with a caching decorator
    :param n: The desired Fibonacci number in the sequence
    :return: The nth Fibonacci number
    """
    if n <= 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)


def caching(max_value: int = FIBONACCI_MAX) -> int:
    """
    Get the sum of all even Fibonacci numbers up to max_value
    --> benchmark: 2168 ns/run
    :param max_value: The ceiling value of Fibonacci numbers to be added
    :return:
    """
    summation = 0
    i = 2

    while fib(i) < max_value:
        summation += fib(i)
        i += 3  # every third fib number is odd! there's an analytic proof somewhere for that...

    return summation


if __name__ == "__main__":
    # Log stuff
    init_logger()
    logger = get_logger()

    # Performance run for generative method
    start = perf_counter_ns()
    for run in range(PERFORMANCE_RUNS):
        generative()
    generative_delta = perf_counter_ns() - start

    # Performance run for method that uses fib getter w/ caching
    start = perf_counter_ns()
    for run in range(PERFORMANCE_RUNS):
        caching()
    gwc_delta = perf_counter_ns() - start

    logger.info(f"Generative answer:     {generative()}  in  {int(generative_delta/PERFORMANCE_RUNS)} ns/run")
    logger.info(f"Fib getter w/ caching: {caching()}  in  {int(gwc_delta/PERFORMANCE_RUNS)} ns/run")
